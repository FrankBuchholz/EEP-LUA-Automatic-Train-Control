# Create a release including a zip archive containing the files of version 2

name: Create release for tag

# Controls when the workflow will run
on:
  # Triggers the workflow whenever a new tag is created
  push:
    tags:
      - '*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job
  release:
    name: Create release for tag
  
    # Condition for execution
    if: github.repository == 'FrankBuchholz/EEP-LUA-Automatic-Train-Control'
    
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Get latest version of BetterContacts
      run: |
        cd blockControl_v2/LUA/
        curl -O -L https://raw.githubusercontent.com/EEP-Benny/BetterContacts/master/BetterContacts_BH2.lua
        # Convert CR to CRLF
        sed -i $'s/$/\r/' BetterContacts_BH2.lua
             
    - name: Build zip file
      run: |
        rm ./blockControl_v2/EEP_blockControl.zip
        zip -r ./blockControl_v2/EEP_blockControl.zip blockControl_v2/EEP_blockControl/ blockControl_v2/LUA/ blockControl_v2/GBS/ blockControl_v2/*.pdf blockControl_v2/Installation blockControl_v2/Installation.eep

    - name: Create release and add zip file
      uses: actions/github-script@v6
      with:
        script: |
          try {
            const tag = context.ref.split('/').pop();
            core.info('Release tag: ' + tag);
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: tag,
              tag_name: tag
            });
            const fs = require('fs').promises;
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id,
              name: 'EEP_blockControl.zip',
              data: await fs.readFile('./blockControl_v2/EEP_blockControl.zip')
            });
          } catch (error) {
            core.setFailed(error.message);
          }
